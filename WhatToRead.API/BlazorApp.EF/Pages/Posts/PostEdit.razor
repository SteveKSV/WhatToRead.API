@page "/editPost/{id:int}"
@using BlazorApp.EF.Models;
@using BlazorApp.EF.Services;
@inject PostService postService
@inject NavigationManager navManager

<h3>PostEdit</h3>

@if (post == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@post" OnValidSubmit="UpdatePost">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="text-danger"></div>
        <div class="form-group">
            <input type="hidden" @bind="post.PostId" />
        </div>
        <div class="form-group">
            <label for="Title" class="control-label">Title</label>
            <InputText id="Title" @bind-Value="post.Title" class="form-control" />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <label for="Slug" class="control-label">Slug</label>
            <InputText id="Slug" @bind-Value="post.Slug" class="form-control" />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <label for="Body" class="control-label">Body</label>
            <InputText id="Body" @bind-Value="post.Body" class="form-control" />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <label for="Views" class="control-label">Views</label>
            <InputNumber id="Views" @bind-Value="post.Views" class="form-control" />
            <span class="text-danger"></span>
        </div>
        <div class="form-group">
            <label for="Updated_At" class="control-label">Updated Date</label>
            <InputDate id="Updated_Ate" @bind-Value="post.Updated_At" class="form-control" />
            <span class="text-danger"></span>
        </div>

        <button type="submit" class="btn btn-primary">Update</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
    </EditForm>
}

@code {
    private Post post = new Post();

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        post = await postService.GetPostByIdAsync(Id);
    }

    private async Task UpdatePost()
    {
        await postService.UpdatePostAsync(Id, post);
        navManager.NavigateTo("/posts", true);
    }

    private void CancelEdit()
    {
        navManager.NavigateTo("/posts", true);
    }
}