@page "/login"
@using BlazorApp.EF.Helpers;
@using BlazorApp.EF.Services;
@using BlazorApp.EF.Models;
@inject UserService userService
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="@loginModel.Email" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="@loginModel.Password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>
    <div class="my-4">
        <button type="submit" class="btn btn-primary">Log In</button>
    </div>
</EditForm>

@code {
    private TokenRequestModel loginModel = new TokenRequestModel();

    private async Task HandleValidSubmit()
    {
        var result = await userService.LoginAsync(loginModel);

        // Обробляйте результат входу тут, наприклад, перенаправте на іншу сторінку
        if (result.IsAuthenticated)
        {
            var customAuthStateProvider = (TokenAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(result);

            navManager.NavigateTo("/", true);
        }
        else
        {
            // Обробіть випадок, коли аутентифікація не пройшла
        }
    }
}
