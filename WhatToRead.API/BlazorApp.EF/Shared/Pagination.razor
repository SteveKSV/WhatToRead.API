@using System

<div class="pagination">
    <button class="pagination-btn" disabled="@IsFirstPage" @onclick="GoToFirstPage">&lt;&lt;</button>
    <button class="pagination-btn" disabled="@IsFirstPage" @onclick="PreviousPage">&lt;</button>

    @for (int i = 1; i <= TotalPages; i++)
    {
        int currentPage = i;
        bool isCurrentPage = currentPage == CurrentPage;
        string activeClass = isCurrentPage ? "active" : "";

        <button class="pagination-btn @activeClass" @onclick="(() => GoToPage(currentPage))">@currentPage</button>
    }

    <button class="pagination-btn" disabled="@IsLastPage" @onclick="NextPage">&gt;</button>
    <button class="pagination-btn" disabled="@IsLastPage" @onclick="GoToLastPage">&gt;&gt;</button>
</div>

@code {
    [Parameter]
    public int TotalItems { get; set; }

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    public int TotalPages => (int)Math.Ceiling((double)TotalItems / PageSize);

    public bool IsFirstPage => CurrentPage == 1;

    public bool IsLastPage => CurrentPage == TotalPages;

    [Parameter]
    public Action<int> OnPageChange { get; set; }

    private void GoToFirstPage()
    {
        GoToPage(1);
    }

    private void GoToLastPage()
    {
        GoToPage(TotalPages);
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            GoToPage(CurrentPage - 1);
        }
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            GoToPage(CurrentPage + 1);
        }
    }

    private void GoToPage(int page)
    {
        OnPageChange?.Invoke(page);
    }
}
